= Decider
<b>Yet Another Ruby Machine Learning Library</b>

= Manifesto
There are other ruby machine learning libraries out there:
* http://github.com/cardmagic/classifier
* http://github.com/pauldix/basset
* More?

So why another one?
* You can install it and try it in irb right away. You don't need to learn how a half-dozen classes work to get started:
        c = Decider.classifier(:spam, :ham)
        c.spam << "some spammy text"
        c.ham << "some hammy goodness"
        c.spam?("more spammy text")
        # => true

The default configuration is about 96% accurate as an email spam classifier.

* You can control how it processes its input easily. Decider has built-in support for plain text and URIs, stemming words, stop word removal, and n-grams. All of these can easily be combined at your option (see "Getting Started" below for a quick example). Additional tokenization strategies or support for non-text document types can be added with a minimum of hassle.

* Persist (Save) with Moneta[http://github.com/wycats/moneta]. Pretty much any storage mechanism that's available in ruby is supported. Save to a database and implement distributed classification if you like.

* Clustering Analysis. Useful for recommendation algorithms.

= Getting Started

  c = Decider.classifier(:spam, :ham) do |doc|
    doc.plain_text
    doc.ngrams(2..3)
    doc.stem
  end
  
  c.spam << "buy viagra, jerk" << "get enormous hot dog for make women happy"
  c.ham << "check out my code on github homie" << "let's go out for beers after work"
  
  p c.spam?("viagra for huge hot dog")
  # => true
  puts "term frequencies:"
  puts "spam: #{c.spam.term_frequency.inspect}"
  puts "ham:  #{c.ham.term_frequency.inspect}"
  puts ""
  p c.scores("let's write code and drink some beers")
  # => {:spam=>0.0, :ham=>1.0}
  p c.classify("let's write code and drink some beers")
  # => :ham
  